# Gelişmiş karakter analizini web ortamında çalıştırmak için Flask kullanacağız.
# Bu örnekte, kullanıcı web arayüzünden sorulara cevap verecek, ardından kişilik analizi ve karakter taklidi sunulacak.

from flask import Flask, render_template_string, request
from textblob import TextBlob
from collections import defaultdict

app = Flask(__name__)

# HTML arayüz şablonu
html_template = """
<!DOCTYPE html>
<html>
<head>
    <title>Karakter Analizi</title>
    <style>
        body { font-family: Arial; padding: 30px; background-color: #f4f4f4; }
        h1 { color: #444; }
        textarea { width: 100%; height: 80px; }
        .question { margin-bottom: 20px; }
        .result { background-color: #fff; padding: 20px; margin-top: 30px; border-radius: 5px; }
        input[type="submit"] { padding: 10px 20px; font-size: 16px; }
    </style>
</head>
<body>
    <h1>Karakter Analizi Formu</h1>
    <form method="post">
        {% for cat, qs in questions.items() %}
            <h3>{{ cat.upper() }}</h3>
            {% for q in qs %}
                <div class="question">
                    <label>{{ q }}</label><br>
                    <textarea name="{{ q }}"></textarea>
                </div>
            {% endfor %}
        {% endfor %}
        <input type="submit" value="Analizi Tamamla">
    </form>

    {% if summary %}
    <div class="result">
        <h2>🔍 Karakter Özeti</h2>
        <ul>
            {% for trait, score in summary.items() %}
                <li><strong>{{ trait.capitalize() }}:</strong> {{ "%.2f"|format(score) }}%</li>
            {% endfor %}
        </ul>
        <h3>🧠 Taklit Cevap:</h3>
        <p><strong>Soru:</strong> {{ user_question }}</p>
        <p><strong>Karakterin Cevabı:</strong> {{ simulated_answer }}</p>
    </div>
    {% endif %}
</body>
</html>
"""

# Gelişmiş karakter profili sınıfı
class AdvancedCharacterProfile:
    def __init__(self):
        self.responses = defaultdict(list)
        self.trait_scores = defaultdict(float)

    def analyze_response(self, category, question, response):
        self.responses[category].append((question, response))

        blob = TextBlob(response)
        polarity = blob.sentiment.polarity
        subjectivity = blob.sentiment.subjectivity

        if polarity > 0.2:
            self.trait_scores["pozitiflik"] += polarity
        elif polarity < -0.2:
            self.trait_scores["negatiflik"] += abs(polarity)
        else:
            self.trait_scores["tarafsızlık"] += 1

        if subjectivity > 0.5:
            self.trait_scores["duygusallık"] += subjectivity
        else:
            self.trait_scores["rasyonellik"] += (1 - subjectivity)

        self.trait_scores["dilsel_karmaşıklık"] += len(response.split()) / 10

    def summarize(self):
        total = sum(self.trait_scores.values()) or 1  # sıfıra bölme hatasını önlemek için
        return {trait: (score / total) * 100 for trait, score in self.trait_scores.items()}

    def simulate_answer(self, user_question):
        blob = TextBlob(user_question)
        style = []

        if self.trait_scores["pozitiflik"] > self.trait_scores["negatiflik"]:
            base_response = "Bana göre bu konuyu iyimser bir bakış açısıyla değerlendirmek gerek."
        elif self.trait_scores["negatiflik"] > self.trait_scores["pozitiflik"]:
            base_response = "Bu konuda oldukça temkinliyim ve pek iyimser düşünemem."
        else:
            base_response = "Bu meseleye oldukça tarafsız yaklaşırım."

        if self.trait_scores["duygusallık"] > self.trait_scores["rasyonellik"]:
            style.append("İçimde hissettiklerim her zaman ağır basar.")
        else:
            style.append("Daha çok mantığımı kullanırım böyle durumlarda.")

        if self.trait_scores["dilsel_karmaşıklık"] > 5:
            style.append("Bu konuyu detaylandırmak gerekirse, çok katmanlı düşünüyorum.")
        else:
            style.append("Aslında oldukça sade düşünüyorum bu konuda.")

        return base_response + " " + " ".join(style)

# Sorular kategorilere göre
questions_advanced = {
    'duygusal': [
        "Seni en son ne ağlattı?",
        "Bir hayal kırıklığını nasıl atlatırsın?",
        "Başkaları seni yanlış anladığında ne hissedersin?"
    ],
    'ahlaki': [
        "Yalan söylemek hangi durumda kabul edilebilir?",
        "Kendin için doğru ama başkası için zararlı bir şey yapar mısın?",
        "Birinin suçu üstlenmeni istese ne yaparsın?"
    ],
    'düşünsel': [
        "İnsan doğası hakkında ne düşünüyorsun?",
        "Gerçeğe ulaşmanın en iyi yolu sence nedir?",
        "Her bilginin sorgulanabilir olması gerektiğine inanır mısın?"
    ],
    'sosyal': [
        "Toplumun birey üzerindeki etkisi sence ne kadar güçlü?",
        "Yalnız kalmayı mı kalabalığı mı tercih edersin?",
        "Sosyal medyanın insan ilişkilerine etkisi hakkında ne düşünüyorsun?"
    ],
    'gündelik': [
        "Bir gününü nasıl planlarsın?",
        "Stresli bir günün ardından nasıl rahatlıyorsun?",
        "Düzenli biri misin yoksa dağınıklık seni rahatsız etmez mi?"
    ],
    'dil': [
        "İroni yapmayı sever misin? Hangi durumlarda?",
        "Kelimelerin insanlar üzerindeki etkisine inanır mısın?",
        "Kendini ifade ederken hangi tarz sana daha yakın?"
    ]
}

@app.route('/', methods=['GET', 'POST'])
def form():
    summary = None
    simulated_answer = None
    user_question = "Hayatta başarıyı neye borçluyuz sence?"

    if request.method == 'POST':
        profile = AdvancedCharacterProfile()
        for cat, qs in questions_advanced.items():
            for q in qs:
                answer = request.form.get(q, "")
                if answer.strip():
                    profile.analyze_response(cat, q, answer)

        summary = profile.summarize()
        simulated_answer = profile.simulate_answer(user_question)

    return render_template_string(
        html_template,
        questions=questions_advanced,
        summary=summary,
        simulated_answer=simulated_answer,
        user_question=user_question
    )

# Flask sunucusunu çalıştır
if __name__ == '__main__':
    app.run(debug=True)
